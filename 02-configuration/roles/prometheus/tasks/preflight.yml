---

- name: Assert usage of systemd as an init system
  ansible.builtin.assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This module only works with systemd"

- name: Get systemd version
  ansible.builtin.command: systemctl --version
  changed_when: false
  check_mode: false
  register: __systemd_version
  tags:
    - skip_ansible_lint

- name: Set systemd version fact
  ansible.builtin.set_fact:
    prometheus_systemd_version: "{{ __systemd_version.stdout_lines[0].split(' ')[-1] }}"

- name: Assert no duplicate config flags
  ansible.builtin.assert:
    that:
      - prometheus_config_flags_extra['config.file'] is not defined
      - prometheus_config_flags_extra['storage.tsdb.path'] is not defined
      - prometheus_config_flags_extra['storage.local.path'] is not defined
      - prometheus_config_flags_extra['web.listen-address'] is not defined
      - prometheus_config_flags_extra['web.external-url'] is not defined
    msg: "Detected duplicate configuration entry. Please check your ansible variables and role README.md."

- name: Assert external_labels aren't configured twice
  ansible.builtin.assert:
    that: prometheus_global.external_labels is not defined
    msg: "Use prometheus_external_labels to define external labels"

- name: Set prometheus external metrics path
  ansible.builtin.set_fact:
    prometheus_metrics_path: "/{{ (prometheus_web_external_url + '/metrics') | regex_replace('^(.*://)?(.*?)/') }}"

- name: Fail when prometheus_config_flags_extra duplicates parameters set by other variables
  ansible.builtin.fail:
    msg: >
      Whooops. You are duplicating configuration. Please look at your prometheus_config_flags_extra
      and check against other variables in defaults/main.yml
  with_items:
    - "storage.tsdb.retention"
    - "storage.tsdb.path"
    - "storage.local.retention"
    - "storage.local.path"
    - "config.file"
    - "web.listen-address"
    - "web.external-url"
  when: item in prometheus_config_flags_extra.keys()

- name: Get all file_sd files from scrape_configs
  ansible.builtin.set_fact:
    file_sd_files:
      "{{ prometheus_scrape_configs | selectattr('file_sd_configs', 'defined') | map(attribute='file_sd_configs') |
      flatten | map(attribute='files') | flatten }}"

- name: Fail when file_sd targets are not defined in scrape_configs
  ansible.builtin.fail:
    msg: >
      Oh, snap! `{{ item.key }}` couldn't be found in your scrape configs. Please ensure you provided
      all targets from prometheus_targets in prometheus_scrape_configs
  when: (not prometheus_config_dir + "/file_sd/" + item.key + ".yml" in file_sd_files) and
        (not prometheus_config_dir + "/file_sd/" + item.key + ".json" in file_sd_files)
  #  when: not item | basename | splitext | difference(['.yml']) | join('') in prometheus_targets.keys()
  with_dict: "{{ prometheus_targets }}"

- name: Alert when prometheus_alertmanager_config is empty, but prometheus_alert_rules is specified
  ansible.builtin.debug:
    msg: >
      There's no use in defining alerting rules if you're not going to use them! Be sure to
      specify a prometheus_alertmanager_config in defaults/main.yml if you're going to define
      prometheus_alert_rules
  when:
    - prometheus_alertmanager_config == []
    - prometheus_alert_rules != []

- name: Check whether prometheus is installed
  ansible.builtin.stat:
    path: "/usr/local/bin/prometheus"
  register: __prometheus_is_installed
  check_mode: false

- name: "Test is present"
  ansible.builtin.debug:
    msg: "{{ __prometheus_is_installed }}"

- name: Gather currently installed prometheus version (if any)
  ansible.builtin.command: "/usr/local/bin/prometheus --version"
  changed_when: false
  register: __prometheus_current_version_output
  check_mode: false
  when: __prometheus_is_installed.stat.exists

- name: "Test version"
  ansible.builtin.debug:
    msg: "{{ __prometheus_current_version_output }}"
