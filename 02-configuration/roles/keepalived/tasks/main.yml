---
- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_version'] | lower }}.yml"
        - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_major_version'] | lower }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['distribution_major_version'] | lower }}.yml"
        - "{{ ansible_facts['distribution'] | lower }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['distribution_version'].split('.')[0] }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}.yml"
      paths:
        - "{{ role_path }}/vars"
  tags:
    - keepalived-packages
    - keepalived-config
    - keepalived-install

- name: Include tasks for get/set VIP address
  ansible.builtin.import_tasks: get_vip.yml
  become: false
  run_once: true
  delegate_to: localhost

- name: "Ensure prerequites are present in debian/ubuntu : {{ keepalived_debian_prereq_packages }}"
  ansible.builtin.package:
    name: "{{ keepalived_debian_prereq_packages }}"
    state: present
  when: ansible_facts['os_family'] | lower == 'debian'

- name: Install keepalived packages
  ansible.builtin.package:
    name: "{{ [keepalived_package_name] + keepalived_scripts_packages }}"
    state: "{{ keepalived_package_state }}"
    update_cache: "yes"
    cache_valid_time: "{{ (ansible_facts['pkg_mgr'] == 'apt') | ternary(cache_timeout, omit) }}"
  notify:
    - Restart keepalived
  tags:
    - keepalived-packages
    - keepalived-install

# Can't use package facts, as it won't be parsed
# properly by version test on debian/ubuntu.
# keepalived --version outputs on stderr
# First line of stderr is similar to 'keepalived v1.0.4 (date)'
- name: Output keepalived version
  ansible.builtin.command: keepalived --version
  register: _keepalived_version
  changed_when: false
  check_mode: "no"
  tags:
    - keepalived-config

- name: Set testability flag
  ansible.builtin.set_fact:
    keepalived_config_testable: "{{ _keepalived_version.stderr_lines[0] | regex_search('[kK]eepalived v(.*) ', '\\1') | join('.') is version('2.0.4', 'ge') }}"
  tags:
    - keepalived-config

- name: Ensure no new "samples" folder appeared
  ansible.builtin.file:
    path: /etc/keepalived/samples/
    state: absent
  when:
    - ansible_facts['os_family'] | lower == 'debian'
  tags:
    - keepalived-install

- name: Get IPv6 enabled state
  ansible.builtin.slurp:
    src: /sys/module/ipv6/parameters/disable
  register: _ipv6_disabled
  tags:
    - keepalived-install

- name: Check if IPv6 is enabled
  ansible.builtin.set_fact:
    ipv6_enabled: "{{ not _ipv6_disabled.failed and '0' in (_ipv6_disabled.content | b64decode) }}"
  tags:
    - keepalived-install

- name: Allow consuming apps to bind on non local addresses for IPv4
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: "yes"
    state: present
  when: keepalived_bind_on_non_local | bool
  loop:
    - name: "net.ipv4.ip_nonlocal_bind"
      value: 1
    - name: "net.ipv4.tcp_retries2"
      value: "{{ keepalived_sysctl_tcp_retries }}"
  notify:
    - Restart keepalived
  tags:
    - keepalived-install

- name: Allow consuming apps to bind on non local addresses for IPv6
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: "yes"
    state: present
  when: keepalived_bind_on_non_local | bool and ipv6_enabled
  loop:
    - name: "net.ipv6.ip_nonlocal_bind"
      value: 1
  notify:
    - Restart keepalived
  tags:
    - keepalived-install

- name: Configure keepalived
  ansible.builtin.template:
    src: keepalived.conf.j2
    dest: "{{ keepalived_config_file_path }}"
    mode: "0640"
    # validate: "{{ keepalived_config_testable | ternary('keepalived --config-test -f %s', omit) }}"
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

##################################################################################""
- name: Copy custom check script if defined keepalived
  ansible.builtin.template:
    src: check_primaty_script.sh.j2
    dest: "{{ keepalived_check_primary_script_file.path }}/{{ keepalived_check_primary_script_file.filename }}"
    mode: "0775"
    owner: "{{ keepalived_check_primary_script_file.user }}"
    group: "{{ keepalived_check_primary_script_file.group }}"
  when: keepalived_check_primary_script_file is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config
#######################################################################################

- name: Check that daemon options file exists
  ansible.builtin.stat:
    path: "{{ keepalived_daemon_options_file_path }}"
  register: keepalived_daemon_options_file
  tags:
    - keepalived-config

- name: Configure keepalived extra params
  ansible.builtin.lineinfile:
    line: "{{ item }}"
    regexp: "^{{ item.split('=')[0] }}"
    dest: "{{ keepalived_daemon_options_file_path }}"
    state: present
  loop: "{{ keepalived_daemon_default_options_overrides }}"
  when: keepalived_daemon_options_file.stat.exists
  notify:
    - Restart keepalived
  tags:
    - keepalived-config

- name: Dropping the tracking scripts
  ansible.builtin.copy:
    src: "{{ item.value.src_check_script }}"
    dest: "{{ item.value.dest_check_script | default(item.value.check_script) }}"
    mode: "0755"
  loop: "{{ keepalived_sync_groups | dict2items | default('{}') }}"
  when: item.value.src_check_script is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the general notification scripts
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_script }}"
    dest: "{{ item.value.notify_script }}"
    mode: "0755"
  loop: "{{ keepalived_sync_groups | dict2items }}"
  when: item.value.src_notify_script is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the notification scripts for switching to master
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_master }}"
    dest: "{{ item.value.notify_master }}"
    mode: "0755"
  loop: "{{ keepalived_sync_groups | dict2items }}"
  when: item.value.src_notify_master is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the notification scripts for switching to backup
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_backup }}"
    dest: "{{ item.value.notify_backup }}"
    mode: "0755"
  loop: "{{ keepalived_sync_groups | dict2items }}"
  when: item.value.src_notify_backup is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the notification scripts for failures
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_fault }}"
    dest: "{{ item.value.notify_fault }}"
    mode: "0755"
  loop: "{{ keepalived_sync_groups | dict2items }}"
  when: item.value.src_notify_fault is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the general notification scripts (instances)
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_script }}"
    dest: "{{ item.value.notify_script }}"
    mode: "0755"
  loop: "{{ keepalived_instances | dict2items }}"
  when: item.value.src_notify_script is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the notification scripts for switching to master (instances)
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_master }}"
    dest: "{{ item.value.notify_master }}"
    mode: "0755"
  loop: "{{ keepalived_instances | dict2items }}"
  when: item.value.src_notify_master is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the notification scripts for lower priority master case (instances)
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_master_rx_lower_pri }}"
    dest: "{{ item.value.notify_master_rx_lower_pri }}"
    mode: "0755"
  loop: "{{ keepalived_instances | dict2items }}"
  when: item.value.src_notify_master_rx_lower_pri is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the notification scripts for switching to backup (instances)
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_backup }}"
    dest: "{{ item.value.notify_backup }}"
    mode: "0755"
  loop: "{{ keepalived_instances | dict2items }}"
  when: item.value.src_notify_backup is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the notification scripts for stopping vrrp (instances)
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_stop }}"
    dest: "{{ item.value.notify_stop }}"
    mode: "0755"
  loop: "{{ keepalived_instances | dict2items }}"
  when: item.value.src_notify_stop is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Dropping the notification scripts for failures (instances)
  ansible.builtin.copy:
    src: "{{ item.value.src_notify_fault }}"
    dest: "{{ item.value.notify_fault }}"
    mode: "0755"
  loop: "{{ keepalived_instances | dict2items }}"
  when: item.value.src_notify_fault is defined
  notify:
    - Reload keepalived
  tags:
    - keepalived-config

- name: Make directory for keepalived's systemd overrides
  ansible.builtin.file:
    path: /etc/systemd/system/keepalived.service.d/
    state: directory
    mode: "0755"
  when:
    - keepalived_systemd_overrides | bool
  tags:
    - keepalived-install

- name: Apply keepalived override to start after network is up
  community.general.ini_file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    create: "yes"
    section: "Unit"
    option: "{{ item }}"
    value: "network-online.target"
    mode: "0644"
  loop:
    - "Wants"
    - "After"
  when:
    - keepalived_systemd_overrides | bool
  notify:
    - Restart keepalived
  tags:
    - keepalived-install

- name: Apply keepalived override to restart service always
  community.general.ini_file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    section: "Service"
    option: "Restart"
    value: "always"
    mode: "0644"
  when:
    - keepalived_systemd_overrides | bool
    - keepalived_systemd_override_service_restart | bool
  notify:
    - Restart keepalived
  tags:
    - keepalived-install

- name: Remove keepalived overrides
  ansible.builtin.file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    state: absent
  when:
    - not (keepalived_systemd_overrides | bool)
  tags:
    - keepalived-install

- name: Ensure keepalived is enabled and started
  ansible.builtin.service:
    daemon_reload: "yes"
    name: "{{ keepalived_service_name }}"
    state: "started"
    enabled: "yes"
  register: _servicestart
  tags:
    - keepalived-install

- name: Core SELinux
  when: 
    - ansible_facts.selinux.status == 'enabled'
    - ansible_os_family == 'RedHat'
  block:
    - name: SELINUX keepalived conf
      ansible.builtin.template:
        src: my-keepalived.te.j2
        dest: /var/tmp/my-keepalived.te
        owner: root
        group: root
        mode: "0640"
      become: true

    - name: Ensure no previous pp file was present
      become: true
      ansible.builtin.file:
        path: /var/tmp/my-keepalived.pp
        state: absent

    - name: Compile SELinux rule
      ansible.builtin.shell: checkmodule -M -m -o my-keepalived /var/tmp/my-keepalived.te && semodule_package -o /var/tmp/my-keepalived.pp -m my-keepalived
      changed_when: false
      become: true

    - name: Check whether pp file was created
      ansible.builtin.stat:
        path: /var/tmp/my-keepalived.pp
      register: keepalived_pp

    - name: Reload SELinux rule
      when: keepalived_pp.stat.exists
      ansible.builtin.shell: semodule -X 300 -i  /var/tmp/my-keepalived.pp
      changed_when: false
      become: true
# end block
- name: Include semodule
  ansible.builtin.include_tasks: semodule.yml
  loop: "{{ keepalived_check_binaries }}"
  when: ansible_facts['os_family'] == 'RedHat'

- name: Include manual SELinux setup
  ansible.builtin.include_tasks: manual_selinux.yml
  when: not (keepalived_selinux_automatic| bool)
