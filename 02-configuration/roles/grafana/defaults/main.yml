---
grafana_version: 10.1.4

grafana_manage_repo: true

http_proxy_dgfip: "http://proxy-appli.infra.dgfip:8080"

ansible_no_log: true

# Should we use the provisioning capability when possible (provisioning require grafana >= 5.0)
grafana_use_provisioning: true

# Should the provisioning be kept synced. If true, previous provisioned objects will be removed if not referenced anymore.
grafana_provisioning_synced: false

grafana_instance: "{{ ansible_fqdn | default(ansible_host) | default(inventory_hostname) }}"

grafana_disk: "/dev/vdb"
grafana_partition: "/dev/vdb1"
grafana_logs_dir: "/var/log/grafana"
grafana_data_dir: "/var/lib/grafana"

monitoring_additional_volume: false

dgfip_download_url: "https://nexus3.appli.dgfip/repository/grafana"

grafana_user: "grafana"

grafana_group: "grafana"

grafana_address: "0.0.0.0"
grafana_port: 3000
# To enable the use of ports below 1024 for unprivileged processes linux needs to set CAP_NET_BIND_SERVICE.
# This has some security implications, and should be a conscious choice.
# Get informed by reading: http://man7.org/linux/man-pages/man7/capabilities.7.html
grafana_cap_net_bind_service: false

# External Grafana address. Variable maps to "root_url" in grafana server section
grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
grafana_api_url: "{{ grafana_url }}"
grafana_domain: "{{ ansible_fqdn | default(ansible_host) | default('localhost') }}"

# Additional options for grafana "server" section
# This section WILL omit options for: http_addr, http_port, domain, and root_url, as those settings are set by variables listed before
grafana_server:
  protocol: http
  enforce_domain: false
  socket: ""
  cert_key: ""
  cert_file: ""
  enable_gzip: false
  static_root_path: public
  router_logging: false
  serve_from_sub_path: false

# Variables correspond to ones in grafana.ini configuration file
# Security
grafana_security:
  admin_user: admin
  admin_password: "admin"
  secret_key: "SW2YcwTIb9zpOOhoPsMm"
  login_remember_days: 7
  cookie_username: grafana_user
  cookie_remember_name: grafana_remember
  disable_gravatar: false
  data_source_proxy_whitelist:
  disable_brute_force_login_protection: false

# Database setup
grafana_database:
  type: sqlite3
#  host: 127.0.0.1:3306
#  name: grafana
#  user: root
#  password: ""
#  url: ""
#  ssl_mode: disable
#  path: grafana.db
#  max_idle_conn: 2
#  max_open_conn: ""
#  log_queries: ""

# Remote cache
grafana_remote_cache: {}

# User management and registration
grafana_welcome_email_on_sign_up: false
grafana_users:
  allow_sign_up: false
  allow_org_create: "{{ (grafana_organizations is defined and grafana_organizations != []) | ternary(true, false) }}"
  # auto_assign_org: true
  auto_assign_org_role: Viewer
  # login_hint: "email or username"
  default_theme: dark
  # external_manage_link_url: ""
  # external_manage_link_name: ""
  # external_manage_info: ""

# grafana authentication mechanisms
grafana_auth:
  disable_login_form: false
  oauth_auto_login: false
  disable_signout_menu: false
  signout_redirect_url: ""
  basic:
    enabled: true
  generic_oauth:
    enabled: true
    name: "Keycloak"
    allow_sign_up: true
    tls_skip_verify_insecure: true
    client_id: "oauth_client_id"
    client_secret: "oauth_secret_id"
    scopes: "openid email profile roles"
    auth_url: "http://KEYCLOAK_URL/auth/realms/REALM_NAME/protocol/openid-connect/auth"
    token_url: "http://URL/auth/realms/mcs/protocol/openid-connect/token"
    api_url: "http://KEYCLOAK_URL/auth/realms/REALM_NAME/protocol/openid-connect/userinfo"
    role_attribute_path: "contains(roles[*], 'Admin') && 'Admin' || contains(roles[*], 'Editor') && 'Editor' || 'Viewer' "

grafana_ldap: {}
#  verbose_logging: false
#  servers:
#    host: 127.0.0.1
#    port: 389 # 636 for SSL
#    use_ssl: false
#    start_tls: false
#    ssl_skip_verify: false
#    root_ca_cert: /path/to/certificate.crt
#    bind_dn: "cn=admin,dc=grafana,dc=org"
#    bind_password: grafana
#    search_filter: "(cn=%s)" # "(sAMAccountName=%s)" on AD
#    search_base_dns:
#      - "dc=grafana,dc=org"
#    group_search_filter: "(&(objectClass=posixGroup)(memberUid=%s))"
#    group_search_base_dns:
#      - "ou=groups,dc=grafana,dc=org"
#    attributes:
#      name: givenName
#      surname: sn
#      username: sAMAccountName
#      member_of: memberOf
#      email: mail
#  group_mappings:
#    - name: Main Org.
#      id: 1
#      groups:
#        - group_dn: "cn=admins,ou=groups,dc=grafana,dc=org"
#          org_role: Admin
#        - group_dn: "cn=editors,ou=groups,dc=grafana,dc=org"
#          org_role: Editor
#        - group_dn: "*"
#          org_role: Viewer
#    - name: Alternative Org
#      id: 2
#      groups:
#        - group_dn: "cn=alternative_admins,ou=groups,dc=grafana,dc=org"
#          org_role: Admin

grafana_session: {}
#  provider: file
#  provider_config: "sessions"

grafana_analytics: {}
#  reporting_enabled: true
#  google_analytics_ua_id: ""

# Set this for mail notifications
grafana_smtp: {}
#  host:
#  user:
#  password:
#  from_address:

# Enable grafana alerting mechanism
grafana_alerting:
  execute_alerts: true
#  error_or_timeout: 'alerting'
#  nodata_or_nullvalues: 'no_data'
#  concurrent_render_limit: 5

# Grafana logging configuration
grafana_log:
# mode: 'console file'
# level: info

# Internal grafana metrics system
grafana_metrics: {}
#  interval_seconds: 10
#  graphite:
#    address: "localhost:2003"
#    prefix: "prod.grafana.%(instance_name)s"

# Distributed tracing options
grafana_tracing: {}
#  address: "localhost:6831"
#  always_included_tag: "tag1:value1,tag2:value2"
#  sampler_type: const
#  sampler_param: 1

grafana_snapshots: {}
#  external_enabled: true
#  external_snapshot_url: "https://snapshots-origin.raintank.io"
#  external_snapshot_name: "Publish to snapshot.raintank.io"
#  snapshot_remove_expired: true
#  snapshot_TTL_days: 90

# External image store
grafana_image_storage: {}
#  provider: gcs
#  key_file:
#  bucket:
#  path:

#######
# Plugins from https://grafana.com/api/plugins (A remplacer par une URL interne quand elle sera disponible sur nexus)
plugin_catalog_url: https://grafana.com/api/plugins

grafana_plugins:
  - grafana-clock-panel
  - vonage-status-panel
  - agenty-flowcharting-panel
  - jdbranham-diagram-panel

# grafana_organizations:
#    - ORG_1
#    - ORG_2

# Dashboards from https://grafana.com/dashboards
grafana_dashboards: []
#  - dashboard_id: '4271'
#    revision_id: '3'
#    datasource: 'Prometheus'
#  - dashboard_id: '1860'
#    revision_id: '4'
#    datasource: 'Prometheus'
#  - dashboard_id: '358'
#    revision_id: '1'
#    datasource: 'Prometheus'

grafana_dashboards_dir: "dashboards"

# Alert notification channels to configure
grafana_alert_notifications: []
#  - name: "Email Alert"
#    type: "email"
#    uid: channel1
#    is_default: true
#    settings:
#      addresses: "example@example.com"

# Datasources to configure
grafana_datasources:
  - name: "prometheus"
    type: "prometheus"
    access: "proxy"
    url: "http://127.0.0.1:9090/prometheus"
    basicAuth: false
    default: true
  - name: "loki"
    type: "loki"
    access: "proxy"
    url: "http://127.0.0.1:3100"
    basicAuth: false
    default: false
  - name: "prometheus-loki"
    type: "prometheus"
    access: "proxy"
    url: "http://127.0.0.1:3100/loki"
    basicAuth: false
    default: false

# API keys to configure
grafana_api_keys: []
#  - name: "admin"
#    role: "Admin"
#  - name: "viewer"
#    role: "Viewer"
#  - name: "editor"
#    role: "Editor"

# The location where the keys should be stored.
grafana_api_keys_dir: "/etc/grafana/keys/{{ inventory_hostname }}"

grafana_environment: {}

# Panels configurations
grafana_panels: {}
#  disable_sanitize_html: false
#  enable_alpha: false

# reverse proxy vars
grafana_install_rp: false

haproxy_tls_enabled: false
haproxy_pools:
  - frontend_name: main
    http_name: localhost
    frontend_port: 443
    mode: http
    backends:
      - backend_name: grafana_backend
        backend_path: "/"
        backend_port: "3000"
