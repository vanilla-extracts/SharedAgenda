---
- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"

- name: Run installation  preflight ...
  ansible.builtin.include_tasks: preflight.yml
  tags:
    - grafana_install
    - grafana_configure
    - grafana_datasources
    - grafana_notifications
    - grafana_dashboards

- name: Creating custom grafana security dictionary variables using 'grafana_security' and 'grafana_security_custom' ...
  ansible.builtin.set_fact:
    grafana_security: "{{ grafana_security | combine(grafana_security_custom | default({}), list_merge='replace') }}"
  tags:
    - always

- name: Configure mountpoint ...
  ansible.builtin.include_tasks: mountpoint.yml
  when: monitoring_additional_volume

- name: "Install grafana {{ grafana_version }}"
  ansible.builtin.include_tasks: install.yml
  tags:
    - grafana_install

- name: Run grafana configuration main tasks ...
  ansible.builtin.include_tasks: configure.yml
  tags:
    - grafana_configure

- name: Configure plugins ...
  ansible.builtin.include_tasks: plugins.yml
  when: grafana_plugins != []
  tags:
    - grafana_configure

- name: Restart grafana before configuring datasources and dashboards
  ansible.builtin.meta: flush_handlers
  tags:
    - grafana_install
    - grafana_configure
    - grafana_datasources
    - grafana_notifications
    - grafana_dashboards
    - grafana_run

- name: Wait for grafana to start (http/s)
  ansible.builtin.wait_for:
    host: "{{ grafana_address }}"
    port: "{{ grafana_port }}"
  when: grafana_server.protocol is undefined or grafana_server.protocol in ['http', 'https']
  tags:
    - grafana_install
    - grafana_configure
    - grafana_datasources
    - grafana_notifications
    - grafana_dashboards
    - grafana_run

- name: Wait for grafana to start (socket)
  ansible.builtin.wait_for:
    path: "{{ grafana_server.socket }}"
  when: grafana_server.protocol is defined and grafana_server.protocol == 'socket'
  tags:
    - grafana_install
    - grafana_configure
    - grafana_datasources
    - grafana_notifications
    - grafana_dashboards
    - grafana_run

- name: Configure API Keys ...
  ansible.builtin.include_tasks: api_keys.yml
  when: grafana_api_keys | length > 0
  tags:
    - grafana_configure
    - grafana_run

- name: Configure datasources ...
  ansible.builtin.include_tasks: datasources.yml
  when: grafana_datasources != []
  tags:
    - grafana_configure
    - grafana_datasources
    - grafana_run

- name: Configure notifications ...
  ansible.builtin.include_tasks: notifications.yml
  when: grafana_alert_notifications | length > 0
  tags:
    - grafana_configure
    - grafana_notifications
    - grafana_run

- name: "Check if there are any dashboards in local {{ grafana_dashboards_dir }}"
  become: false
  ansible.builtin.set_fact:
    found_dashboards: "{{ lookup('fileglob', grafana_dashboards_dir + '/*.json', wantlist=True) }}"
  tags:
    - grafana_configure
    - grafana_dashboards
    - grafana_run

- name: Configure dashboards ...
  ansible.builtin.include_tasks: dashboards.yml
  when: grafana_dashboards | length > 0 or found_dashboards | length > 0
  tags:
    - grafana_configure
    - grafana_dashboards
    - grafana_run

- name: Configure organizations ...
  ansible.builtin.include_tasks:
    file: organizations.yml
    apply:
      tags: grafana_organizations
  when:
    - grafana_organizations is defined
    - grafana_organizations != []
  tags:
    - grafana_configure
    - grafana_organizations

- name: Configure reverse proxy ...
  ansible.builtin.include_tasks: "reverse_proxy.yml"
  when: grafana_install_rp|bool
  tags:
    - grafana_configure
    - grafana_install_reverse_proxy
